#! /usr/bin/env sh

printUsage() {
	echo  ""
	echo  "Usage:"
	echo  ""
	echo  "  riakcli list buckets                                   -> Lists all the buckets available in RIAK"
	echo  "  riakcli list keys [bucket-name]                        -> Lists all keys in a given bucket"
	echo  ""
	echo  "  riakcli get object [bucket-name] [key]                 -> Gets the object associated with a given key in a specified bucket"	
	echo  "  riakcli put object [bucket-name] [key] [object-json]   -> Creates/Updates an object for a given key in a specified bucket"
	echo  "  riakcli search by_index [bucket-name] [index-name] [index-value]"
	echo  "                                                         -> Searches given value by secondary index in a specified bucket"
	echo  ""
	echo  "  riakcli delete bucket [bucket-name]                    -> Deletes all objects in a specified bucket"
	echo  "  riakcli delete object [bucket-name] [key]              -> Deletes an object in a given bucket"
	echo  "  riakcli flush                                          -> Deletes all the buckets in RIAK"
	echo  ""
	echo  "  riakcli ping                                           -> Connects to RIAK instance for status"
	echo  "  riakcli help                                           -> Displays this usage information"	
}

printInvalidUsage() {
	echo  ""
	echo "********************************************************"
	echo "ERROR: Invalid Usage "		
	echo "********************************************************"

	printUsage
}

### HELPER FUNCTIONS ###
checkForArgs() {
	ARGS_REQUIRED=$1
	MESSAGE=$2
	shift 2
	if [ $# -lt $ARGS_REQUIRED ]; then		
		echo "\n********************************************************"
		echo "ERROR: Insufficient arguments"
		echo "ERROR: Command: ${MESSAGE}"
		echo "********************************************************"

		printUsage
		exit	
	fi
}

crl() {
	curl -w "\n" $*
}

cput() {	
	local URL=$1
	local DATA=$2
	crl -XPUT -H "Content-Type:application/json" ${URL} -d ${DATA}
}

cdel() {
	local URL=$1
	crl -XDELETE ${URL}
}

########################
ping() {
	crl ${RIAK_BASE_URL}/ping
}

listBuckets() {
	crl -s ${RIAK_BASE_URL}/buckets?buckets=true
}

listKeysInBucket() {
	checkForArgs 1 "riakcli list keys [bucket-name]" $*
	local BUCKET=$1
	crl ${RIAK_BASE_URL}/buckets/${BUCKET}/keys?keys=true
}

getObject() {
	checkForArgs 2 "riakcli get object [bucket-name] [key]" $*

	local BUCKET=$1
	local KEY=$2

	crl ${RIAK_BASE_URL}/riak/${BUCKET}/${KEY}
}

putObject() {	
	checkForArgs 3 "riakcli put object [bucket-name] [key] [object-json]" $*

	local BUCKET=$1
	local KEY=$2
	shift 2	

	local OBJECT=$* 
	OBJECT=`echo ${OBJECT} | sed "s/ //g"`
	cput ${RIAK_BASE_URL}/riak/${BUCKET}/${KEY} ${OBJECT}
}

searchByIndex() {
	checkForArgs 3 "search by_index [bucket-name] [index-name] [index-value]" $*	
	local BUCKET=$1
	local INDEX=$2
	local VALUE=$3

	crl ${RIAK_BASE_URL}/buckets/${BUCKET}/index/${INDEX}_bin/${VALUE}
}

deleteBucket() {
	checkForArgs 1 "riakcli delete bucket [bucket-name]" $*
	local BUCKET=$1
	
	for KEY in `listKeysInBucket ${BUCKET} | sed -e 's/^.*\[//g' -e 's/"//g' -e 's/\]\}//g' -e 's/,/\'$'\n/g'`;
    do
        deleteObject ${BUCKET} ${KEY}
    done;
}

deleteObject() {
	checkForArgs 2 "riakcli delete object [bucket-name] [key]" $*

	local BUCKET=$1
	local KEY=$2

	cdel ${RIAK_BASE_URL}/riak/${BUCKET}/${KEY};
}

flush() {
	for BUCKET in  `listBuckets | cut -d ':' -f2 | sed -e 's/^.*\[//g' -e 's/"//g' -e 's/\]\}//g' -e 's/,/\'$'\n/g'`;
	do
		echo "Deleting bucket - ${BUCKET}"
		deleteBucket ${BUCKET}
	done;
}

### TOP LEVEL COMMANDS BEGIN ###


list() {
	case "$1" in
		"buckets" )			
			listBuckets
			;;
		"keys" )
			shift			
			listKeysInBucket $*
			;;
		* )
			printInvalidUsage			
			;;
	esac	
}

get() {
	case "$1" in
		"object" )
			shift 			
			getObject $*
			;;
		* )
			printInvalidUsage			
			;;
	esac	
}

search() {
	case "$1" in
		"by_index" )
			shift
			searchByIndex $*
			;;
		* ) 
			printInvalidUsage			
			;;
	esac
}

put() {
	case "$1" in
		"object" )
			shift
			putObject $*
			;;
		* )
			printInvalidUsage			
			;;
	esac
}

delete() {
	case "$1" in
		"bucket" )
			shift
			deleteBucket $*
			;;
		"object" )
			shift
			deleteObject $*
			;;
		* )
			printInvalidUsage			
			;;			
	esac
}

### TOP LEVEL COMMANDS END ###

__init__() {

	RIAK_HOST="localhost"
	RIAK_PORT=8098

	if [ -f "$HOME/.riakclirc" ]; then . "$HOME/.riakclirc"; fi

	export RIAK_PORT RIAK_PORT
	RIAK_BASE_URL="http://${RIAK_HOST}:${RIAK_PORT}"
	export RIAK_BASE_URL



	case "$1" in
		"help" )
			printUsage
			;;
		"ping" )
			ping
			;;
		"put" )
			shift
			put $*
			;;
		"get" )
			shift
			get $*
			;;
		"search" )
			shift
			search $*
			;;
		"list" )
			shift
			list $*
			;;
		"delete" )
			shift
			delete $*
			;;
		"flush" )
			flush
			;;
		* )
			printUsage
			;;
	esac	
}

__init__ $*
